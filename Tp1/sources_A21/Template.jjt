options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
    < IF: "if"> |
    < ELSE: "else" > |
    < ELSEIF: "else if" > |
	< PRINT: "print" > |
	< INPUT: "input" > |
	< WHILE: "while" > |
	< DO: "do" >
	// À compléter au besoin
}

// Operators
TOKEN :
{
	< ASSIGN: < EQUAL >  > |
	< COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    < LOGIC: < AND > | < OR > > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
    < NOT: "!" > |

	< #EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< #AND: "&&" > |
	< #OR: "||" >
	// À compléter au besoin
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	//TODO: Caution! Allows numbers such as "0000.23"... to fix!!!
	< REAL: (<INTEGER>)+ "." (["0"-"9"])+ (<EXPONENT>)? | (<INTEGER>)+ <EXPONENT> > |
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >|
    < VARIABLES: <INTEGER> >
}

//
// SYNTAX ANALYSIS
//



// à compléter
void Stmt() : { }
{
	AssignStmt() <SEMICOLON>
}

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() : { }
{
	 (Stmt())+
}

// à finir -- commencez ici!
//
void AssignStmt() : {  }
{
    Identifier() <ASSIGN> Expr()
}

void Expr() : {}
{
    IntExpr()
}

void IntExpr() : { }
{
    IntLogicExpr()
}

void IntLogicExpr() : { }
{
    IntBasicExpr() (LOOKAHEAD(2)
         <LOGIC> IntBasicExpr())*
}

void IntBasicExpr() : { }
{
	Identifier() |
	IntValue()
}

void Identifier() : { }
{
	<IDENTIFIER>
}

void IntValue() : { }
{
	<INTEGER>
}

// 2.1 Les boucles while et do-while
void WhileStmt() : {}
{
    <WHILE> <LPAREN> Expr() <RPAREN> ((WhileBody() | Stmt())| <SEMICOLON>)
}

void WhileBody() : {}
{
    <LACC> Block() <RACC>
}

void DoStmt() : {}
{
    <DO> <LACC> Block() <RACC> WhileStmt()
}

//2.2 Structures conditionnelles
void IfStmt() : { }
{
    <IF> <LPAREN> Expr() <RPAREN>
    ((IfBody()#IfBody)
    (LOOKAHEAD(2) <ELSEIF> <LPAREN> Expr() <RPAREN> IfBody()#ElseIfBody)*
    [LOOKAHEAD(2) <ELSE> IfBody()#Else])
}

void IfBody() #void : { }
{
    (Stmt() | <LACC> Block() <RACC>)
}

//2.6 Priorite des operations
void AndOrExpr() #void : { }
{
    (CompExpr() [<LOGIC> AndOrExpr()])#OperateurAndOr(>1)
}

void CompExpr() #void : { }
{
    (AddExpr() [<COMPARE> CompExpr()])#OperateurComparaison(>1)
}

void AddExpr() #void : { }
{
    (MulExpr() [(<PLUS> | <MINUS>) AddExpr()])#AdditionSoustraction(>1)
}

void MulExpr() #void : { }
{
    (NegationExpr() [(<FOIS> | <DIV>) MulExpr()])#MultiplicationDivison(>1)
}

void NegationExpr() #void : { }
{
    (<MINUS> NegationExpr() #Negation) | NotExpr()
}

void NotExpr() #void : { }
{
    (<NOT> NotExpr() #Not) | ParExpr()
}

void ParExpr() #void : { }
{
   (<LPAREN> Expr() <RPAREN>)#Parenthese | BasicExpr()
}
void BasicExpr() #void : {}
{
	LOOKAHEAD(2) Identifier() |
	IntValue() |
	RealValue()
}
void RealValue() : { Token t;}
{
	t = <REAL> {jjtThis.setValue(Double.parseDouble(t.image));}
}